@rendermode InteractiveServer

@inject Services.WeaponService WeaponService
@inject NavigationManager NavigationManager

<!-- Modal -->
<div class="modal fade" id="@GetModalId(Weapon)" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="exampleModalLabel">@_title</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal"
                    @onclick="@(async () => await DeleteWeaponAsync())">Delete</button>
            </div>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public Weapon? Weapon { get; set; }

    private string _title = string.Empty;

    protected override Task OnParametersSetAsync()
    {
        _title = $"Delete {Weapon?.Name} ?";
        return base.OnParametersSetAsync();
    }

    public static string GetModalId(Weapon? weapon)
    {
        ArgumentNullException.ThrowIfNull(weapon);
        return $"deleteWeaponModal{weapon.Id.ToString().Replace("-", string.Empty)}";
    }

    private async Task DeleteWeaponAsync()
    {
        if (Weapon == null)
        {
            return;
        }

        await WeaponService.DeleteWeaponAsync(Weapon.Id);
        NavigationManager.Refresh();
        @* NavigationManager.NavigateTo("/weapons", forceLoad: true); *@
    }
}