@page "/editweapon"
@using WebApiLearning.Domain.Entities
@using WebApiLearning.Blazor.Models
@attribute [StreamRendering]
@inject WeaponService WeaponService
@inject NavigationManager NavigationManager

<PageTitle>Edit Weapon</PageTitle>

<h1>Edit Weapon</h1>

@if (WeaponDetails is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="@WeaponDetails" FormName="editWeapon" OnValidSubmit="HandleSubmitAsync">
        <DataAnnotationsValidator />
        <div class="mb-3">
            <label for="weaponName" class="form-label">Name:</label>
            <InputText class="form-control" id="weaponName" @bind-Value="WeaponDetails.Name" />
            <ValidationMessage For="() => WeaponDetails.Name" />
        </div>
        <div class="mb-3">
            <label for="weaponRarity" class="form-label">Rarity:</label>
            <InputSelect class="form-select" id="weaponRarity" @bind-Value="WeaponDetails.Rarity">
                @foreach (var rarity in Enum.GetValues<ERarity>())
                {
                    <option value="@rarity">@rarity</option>
                }
            </InputSelect>
            <ValidationMessage For="() => WeaponDetails.Rarity" />
        </div>

        <div class="mb-3">
            <label for="weaponDamage" class="form-label">Damage:</label>
            <InputNumber class="form-control" id="weaponDamage" @bind-Value="WeaponDetails.Damage" />
            <ValidationMessage For="() => WeaponDetails.Damage" />
        </div>

        <div class="mb-3">
            <label for="weaponAttackSpeed" class="form-label">Attack Speed:</label>
            <InputNumber class="form-control" id="weaponAttackSpeed" @bind-Value="WeaponDetails.AttackSpeed" />
            <ValidationMessage For="() => WeaponDetails.AttackSpeed" />
        </div>

        <div class="mb-3">
            <label for="weaponPurchasePrice" class="form-label">Purchase Price:</label>
            <InputNumber class="form-control" id="weaponPurchasePrice" @bind-Value="WeaponDetails.PurchasePrice" />
            <ValidationMessage For="() => WeaponDetails.PurchasePrice" />
        </div>

        <div class="mb-3">
            <label for="weaponSellPrice" class="form-label">Sell Price:</label>
            <InputNumber class="form-control" id="weaponSellPrice" @bind-Value="WeaponDetails.SellPrice" />
            <ValidationMessage For="() => WeaponDetails.SellPrice" />
        </div>
        <button type="submit" class="btn btn-primary">Submit</button>
        <a role="button" class="btn btn-secondary" href="/weapons">Cancel</a>
    </EditForm>
}

@code {
    [SupplyParameterFromForm] private WeaponDetails? WeaponDetails { get; set; } = WeaponDetails.Empty;

    private async Task HandleSubmitAsync()
    {
        if (WeaponService is null || WeaponDetails is null) return;
        await WeaponService.AddNewWeapon(new Weapon(
        Name: WeaponDetails.Name,
        Rarity: WeaponDetails.Rarity,
        Damage: WeaponDetails.Damage,
        AttackSpeed: WeaponDetails.AttackSpeed,
        PurchasePrice: WeaponDetails.PurchasePrice,
        SellPrice: WeaponDetails.SellPrice
        ));
        NavigationManager.NavigateTo("/weapons");
    }
}